// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FamilyEventt.Models
{
    public partial class FamilyEventContext : DbContext
    {
        public FamilyEventContext()
        {
        }

        public FamilyEventContext(DbContextOptions<FamilyEventContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<ChatMessage> ChatMessage { get; set; }
        public virtual DbSet<DateTimeLocation> DateTimeLocation { get; set; }
        public virtual DbSet<Decoration> Decoration { get; set; }
        public virtual DbSet<DecorationProduct> DecorationProduct { get; set; }
        public virtual DbSet<Entertainment> Entertainment { get; set; }
        public virtual DbSet<EntertainmentProduct> EntertainmentProduct { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<EventBooker> EventBooker { get; set; }
        public virtual DbSet<EventType> EventType { get; set; }
        public virtual DbSet<Family> Family { get; set; }
        public virtual DbSet<Feedback> Feedback { get; set; }
        public virtual DbSet<Food> Food { get; set; }
        public virtual DbSet<FoodType> FoodType { get; set; }
        public virtual DbSet<GameServices> GameServices { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<MenuProduct> MenuProduct { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<Participant> Participant { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<RoomLocation> RoomLocation { get; set; }
        public virtual DbSet<Script> Script { get; set; }
        public virtual DbSet<ShowService> ShowService { get; set; }
        public virtual DbSet<Verify> Verify { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.AccountId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AccountID");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<ChatMessage>(entity =>
            {
                entity.HasKey(e => e.ChatId);

                entity.Property(e => e.ChatId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ChatID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.EventBookerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventBookerID");

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.StaffId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("StaffID");

                entity.HasOne(d => d.EventBooker)
                    .WithMany(p => p.ChatMessage)
                    .HasForeignKey(d => d.EventBookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChatMessage_EventBooker");
            });

            modelBuilder.Entity<DateTimeLocation>(entity =>
            {
                entity.HasKey(e => new { e.EventId, e.RoomId, e.Date });

                entity.Property(e => e.EventId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.RoomId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RoomID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.DateTimeLocation)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DateTimeLocation_Event");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.DateTimeLocation)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DateTimeLocation_RoomLocation");
            });

            modelBuilder.Entity<Decoration>(entity =>
            {
                entity.Property(e => e.DecorationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DecorationID");

                entity.Property(e => e.DecorationImage).IsRequired();

                entity.Property(e => e.DecorationName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DecorationPrice).HasColumnType("money");
            });

            modelBuilder.Entity<DecorationProduct>(entity =>
            {
                entity.HasKey(e => new { e.DecorationId, e.ProductId });

                entity.Property(e => e.DecorationId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DecorationID");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.HasOne(d => d.Decoration)
                    .WithMany(p => p.DecorationProduct)
                    .HasForeignKey(d => d.DecorationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DecorationProduct_Decoration");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.DecorationProduct)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DecorationProduct_Product");
            });

            modelBuilder.Entity<Entertainment>(entity =>
            {
                entity.Property(e => e.EntertainmentId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("EntertainmentID");

                entity.Property(e => e.EntertainmentTotal).HasColumnType("money");
            });

            modelBuilder.Entity<EntertainmentProduct>(entity =>
            {
                entity.HasKey(e => e.ProductId);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");

                entity.Property(e => e.EntertainmentId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("EntertainmentID");

                entity.Property(e => e.EntertainmentProductPrice).HasColumnType("money");

                entity.Property(e => e.GameId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("GameID");

                entity.Property(e => e.ShowId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ShowID");

                entity.HasOne(d => d.Entertainment)
                    .WithMany(p => p.EntertainmentProduct)
                    .HasForeignKey(d => d.EntertainmentId)
                    .HasConstraintName("FK_EntertainmentProduct_Entertainment");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.EntertainmentProduct)
                    .HasForeignKey(d => d.GameId)
                    .HasConstraintName("FK_EntertainmentProduct_Game");

                entity.HasOne(d => d.Show)
                    .WithMany(p => p.EntertainmentProduct)
                    .HasForeignKey(d => d.ShowId)
                    .HasConstraintName("FK_EntertainmentShow_Show");
            });

            modelBuilder.Entity<Event>(entity =>
            {
                entity.Property(e => e.EventId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.DecorationId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DecorationID");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.EntertainmentId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("EntertainmentID");

                entity.Property(e => e.EventBookerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventBookerID");

                entity.Property(e => e.EventTypeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventTypeID");

                entity.Property(e => e.MenuId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuID");

                entity.Property(e => e.OrganizedPerson).HasMaxLength(50);

                entity.Property(e => e.ScriptId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ScriptID");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.TotalPrice).HasColumnType("money");

                entity.HasOne(d => d.Decoration)
                    .WithMany(p => p.Event)
                    .HasForeignKey(d => d.DecorationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Event_Decoration");

                entity.HasOne(d => d.Entertainment)
                    .WithMany(p => p.Event)
                    .HasForeignKey(d => d.EntertainmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Event_Entertainment");

                entity.HasOne(d => d.EventBooker)
                    .WithMany(p => p.Event)
                    .HasForeignKey(d => d.EventBookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Event_EventBooker");

                entity.HasOne(d => d.EventType)
                    .WithMany(p => p.Event)
                    .HasForeignKey(d => d.EventTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Event_EventType");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.Event)
                    .HasForeignKey(d => d.MenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Event_Menu");

                entity.HasOne(d => d.Script)
                    .WithMany(p => p.Event)
                    .HasForeignKey(d => d.ScriptId)
                    .HasConstraintName("FK_Event_Script");
            });

            modelBuilder.Entity<EventBooker>(entity =>
            {
                entity.Property(e => e.EventBookerId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventBookerID");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Fullname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RegisterDate).HasColumnType("date");

                entity.HasOne(d => d.EventBookerNavigation)
                    .WithOne(p => p.EventBooker)
                    .HasForeignKey<EventBooker>(d => d.EventBookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventBooker_Account");
            });

            modelBuilder.Entity<EventType>(entity =>
            {
                entity.Property(e => e.EventTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventTypeID");

                entity.Property(e => e.EventTypeImage).IsRequired();

                entity.Property(e => e.EventTypeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Family>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.EventBookerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventBookerID");

                entity.Property(e => e.MemberId)
                    .HasMaxLength(50)
                    .HasColumnName("MemberID");

                entity.Property(e => e.MemberName).IsRequired();

                entity.Property(e => e.MemberPhone)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.EventBooker)
                    .WithMany(p => p.Family)
                    .HasForeignKey(d => d.EventBookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Family_EventBooker");
            });

            modelBuilder.Entity<Feedback>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.EventBookerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventBookerID");

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.HasOne(d => d.EventBooker)
                    .WithMany(p => p.Feedback)
                    .HasForeignKey(d => d.EventBookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Feedback_EventBooker");

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.Feedback)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Feedback_Event");
            });

            modelBuilder.Entity<Food>(entity =>
            {
                entity.Property(e => e.FoodId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FoodID");

                entity.Property(e => e.Dish)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FoodImage).IsRequired();

                entity.Property(e => e.FoodName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FoodPrice).HasColumnType("money");

                entity.Property(e => e.FoodTypeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FoodTypeID");

                entity.HasOne(d => d.FoodType)
                    .WithMany(p => p.Food)
                    .HasForeignKey(d => d.FoodTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Food_FoodType");
            });

            modelBuilder.Entity<FoodType>(entity =>
            {
                entity.Property(e => e.FoodTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FoodTypeID");

                entity.Property(e => e.FoodTypeDetail).IsRequired();

                entity.Property(e => e.FoodTypeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<GameServices>(entity =>
            {
                entity.HasKey(e => e.GameId)
                    .HasName("PK_Game");

                entity.Property(e => e.GameId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("GameID");

                entity.Property(e => e.GameDetails).IsRequired();

                entity.Property(e => e.GameImage).IsRequired();

                entity.Property(e => e.GameName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GameReward)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GameRules).IsRequired();

                entity.Property(e => e.GameServicePrice).HasColumnType("money");

                entity.Property(e => e.Supplies)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.Property(e => e.MenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuID");

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PriceTotal).HasColumnType("money");
            });

            modelBuilder.Entity<MenuProduct>(entity =>
            {
                entity.HasKey(e => new { e.MenuId, e.Product });

                entity.Property(e => e.MenuId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MenuID");

                entity.Property(e => e.Product)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.MenuProduct)
                    .HasForeignKey(d => d.MenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MenuProduct_Menu1");

                entity.HasOne(d => d.ProductNavigation)
                    .WithMany(p => p.MenuProduct)
                    .HasForeignKey(d => d.Product)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MenuFood_Food");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EventId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.NotificationContent).HasMaxLength(100);

                entity.Property(e => e.Type).HasMaxLength(100);

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_Notification_Event");
            });

            modelBuilder.Entity<Participant>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.FullNameParticipant)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Relation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Event)
                    .WithMany()
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Participant_Event");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.PaymentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentID");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.PayContent)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.Payment)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Payment_Event");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.ProductId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");

                entity.Property(e => e.DecorationProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ProductDetails).IsRequired();

                entity.Property(e => e.ProductPrice).HasColumnType("money");

                entity.Property(e => e.ProductSupplier)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RoomLocation>(entity =>
            {
                entity.HasKey(e => e.RoomId);

                entity.Property(e => e.RoomId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RoomID");

                entity.Property(e => e.Parking).HasMaxLength(50);

                entity.Property(e => e.RoomName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Script>(entity =>
            {
                entity.Property(e => e.Id)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("id");

                entity.Property(e => e.ScriptContent).IsRequired();

                entity.Property(e => e.ScriptName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShowService>(entity =>
            {
                entity.HasKey(e => e.ShowId)
                    .HasName("PK_Show");

                entity.Property(e => e.ShowId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ShowID");

                entity.Property(e => e.Light)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShowDescription).IsRequired();

                entity.Property(e => e.ShowPrice).HasColumnType("money");

                entity.Property(e => e.ShowServiceName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Singer)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Sound)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Verify>(entity =>
            {
                entity.Property(e => e.VerifyId).HasColumnName("VerifyID");

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.VerifyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.Verify)
                    .HasForeignKey(d => d.EventId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Verify_Event");
            });

            modelBuilder.Entity<Voucher>(entity =>
            {
                entity.Property(e => e.VoucherId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VoucherID");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.EventId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EventID");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.VoucherName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Event)
                    .WithMany(p => p.Voucher)
                    .HasForeignKey(d => d.EventId)
                    .HasConstraintName("FK_Voucher_Event");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}